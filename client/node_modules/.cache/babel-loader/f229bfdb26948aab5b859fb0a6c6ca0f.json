{"ast":null,"code":"import axios from 'axios';\nimport crypto from 'crypto';\nimport { DIFFIE_HELMAN, DIFFIE_HELMAN_END } from './actionTypes';\nexport function Dh() {\n  return dispatch => {\n    const DHData = {\n      \"Dh\": true,\n      \"Dh_time\": \"begin\"\n    };\n    let url = 'http://localhost:8888/auth';\n    let body = JSON.stringify(DHData);\n    console.log(body);\n    axios.all([axios({\n      method: 'post',\n      url: url,\n      data: body\n    })]); // axios({\n    //     method: 'post',\n    //     url: url,\n    //     data: body,\n    //   }).then((response) => {\n    //     let data = DHhelp(response)\n    //     dispatch(DHSuccess(data.IP, data.prime, data.generator, data.serverPubKey, data.secret))\n    //     console.log(\"DH END\")\n    // }).catch(function (error) {\n    //     console.log(error);\n    //   });\n  };\n}\nexport function DHhelp(response) {\n  console.log(response.data);\n  const IP = response.data.IP;\n  console.log(\"IP\", response.data.IP);\n  const prime = JSON.parse(JSON.stringify(response.data.serverPrime), (key, value) => {\n    return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n  });\n  const generator = JSON.parse(JSON.stringify(response.data.serverGenerator), (key, value) => {\n    return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n  });\n  const serverPubKey = JSON.parse(JSON.stringify(response.data.serverPublicKey), (key, value) => {\n    return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n  });\n  console.log(\"prime\", prime.toString(\"hex\"));\n  console.log(\"generator\", generator.toString(\"hex\"));\n  console.log(\"serverPubKey\", serverPubKey.toString(\"hex\"));\n  let client = crypto.createDiffieHellman(prime, generator);\n  client.generateKeys();\n  const clientPubKey = client.getPublicKey();\n  console.log(\"clientPubKey\", clientPubKey.toString(\"hex\"));\n  let secret = client.computeSecret(serverPubKey);\n  console.log(\"secret\", secret.toString(\"hex\"));\n  let ObjData = {\n    \"prime\": prime,\n    \"generator\": generator,\n    \"serverPubKey\": serverPubKey,\n    \"clientPubKey\": clientPubKey,\n    \"secret\": secret\n  };\n  return ObjData;\n}\nexport function DHSuccess(IP, prime, generator, serverPublicKey, secret) {\n  console.log(\"DIFFIE_HELMAN\");\n  return {\n    type: DIFFIE_HELMAN,\n    IP,\n    prime,\n    generator,\n    serverPublicKey,\n    secret\n  };\n}","map":{"version":3,"sources":["/home/gleban/WORKS/messnger_project/client/src/store/actions/Dh.js"],"names":["axios","crypto","DIFFIE_HELMAN","DIFFIE_HELMAN_END","Dh","dispatch","DHData","url","body","JSON","stringify","console","log","all","method","data","DHhelp","response","IP","prime","parse","serverPrime","key","value","type","Buffer","from","generator","serverGenerator","serverPubKey","serverPublicKey","toString","client","createDiffieHellman","generateKeys","clientPubKey","getPublicKey","secret","computeSecret","ObjData","DHSuccess"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport crypto from 'crypto'\n\nimport { DIFFIE_HELMAN, DIFFIE_HELMAN_END } from './actionTypes'\n\nexport function Dh() {\n    return dispatch => {\n        const DHData = {\n           \"Dh\": true,\n           \"Dh_time\": \"begin\"\n        }\n\n    let url = 'http://localhost:8888/auth';\n    \n    let body = JSON.stringify(DHData);\n    console.log(body)\n    axios.all([ axios({\n        method: 'post',\n        url: url,\n        data: body,\n      })])\n    // axios({\n    //     method: 'post',\n    //     url: url,\n    //     data: body,\n    //   }).then((response) => {\n    //     let data = DHhelp(response)\n    //     dispatch(DHSuccess(data.IP, data.prime, data.generator, data.serverPubKey, data.secret))\n    //     console.log(\"DH END\")\n\n    // }).catch(function (error) {\n    //     console.log(error);\n    //   });\n    }\n}\n\nexport function DHhelp(response) {\n    console.log(response.data);\n          const IP = response.data.IP\n          console.log(\"IP\", response.data.IP);\n\n          const prime = JSON.parse(JSON.stringify(response.data.serverPrime), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          const generator = JSON.parse(JSON.stringify(response.data.serverGenerator), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          const serverPubKey = JSON.parse(JSON.stringify(response.data.serverPublicKey), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n\n          console.log(\"prime\" ,prime.toString(\"hex\"))\n          console.log(\"generator\", generator.toString(\"hex\"))\n          console.log(\"serverPubKey\", serverPubKey.toString(\"hex\"))\n\n          let client = crypto.createDiffieHellman(prime, generator)\n          client.generateKeys(); \n\n          const clientPubKey = client.getPublicKey();\n          console.log(\"clientPubKey\", clientPubKey.toString(\"hex\")  )\n          \n          let secret = client.computeSecret(serverPubKey)\n          console.log(\"secret\", secret.toString(\"hex\"))\n\n          let ObjData = {\n              \"prime\": prime,\n              \"generator\": generator,\n              \"serverPubKey\": serverPubKey,\n              \"clientPubKey\": clientPubKey,\n              \"secret\": secret\n          }\n\n          return ObjData;\n\n}\n\nexport function DHSuccess(IP, prime, generator, serverPublicKey, secret) {\n    console.log(\"DIFFIE_HELMAN\")\n    return {\n        type: DIFFIE_HELMAN,\n        IP,\n        prime,\n        generator,\n        serverPublicKey,\n        secret\n    }\n}\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}