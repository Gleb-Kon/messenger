{"ast":null,"code":"import axios from 'axios';\nimport crypto from 'crypto';\nimport { DIFFIE_HELMAN, DIFFIE_HELMAN_END } from './actionTypes';\nexport function Dh() {\n  return dispatch => {\n    const DHData = {\n      Dh: true\n    };\n    let url = 'http://localhost:8888/auth';\n    let body = JSON.stringify(DHData);\n    console.log(body);\n    axios({\n      method: 'post',\n      url: url,\n      data: body\n    }).then(response => {\n      console.log(response.data);\n      const prime = JSON.parse(JSON.stringify(response.data.serverPrime), (key, value) => {\n        return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n      });\n      const generator = JSON.parse(JSON.stringify(response.data.serverGenerator), (key, value) => {\n        return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n      });\n      console.log(prime);\n      console.log(generator);\n      let client = crypto.createDiffieHellman(prime, generator); //   dispatch(DHSuccess(parseData.data.IP, \n      //                      parseData.data.prime, \n      //                      parseData.data.generator, \n      //                      parseData.data.serverPublicKey\n      //                     ))\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n}\nexport function DHSuccess(IP, prime, generator, serverPublicKey) {\n  console.log(\"DIFFIE_HELMAN\");\n  return {\n    type: DIFFIE_HELMAN,\n    IP,\n    prime,\n    generator,\n    serverPublicKey\n  };\n}","map":{"version":3,"sources":["/home/gleban/WORKS/messnger_project/client/src/store/actions/Dh.js"],"names":["axios","crypto","DIFFIE_HELMAN","DIFFIE_HELMAN_END","Dh","dispatch","DHData","url","body","JSON","stringify","console","log","method","data","then","response","prime","parse","serverPrime","key","value","type","Buffer","from","generator","serverGenerator","client","createDiffieHellman","catch","error","DHSuccess","IP","serverPublicKey"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAASC,aAAT,EAAwBC,iBAAxB,QAAiD,eAAjD;AAEA,OAAO,SAASC,EAAT,GAAc;AACjB,SAAOC,QAAQ,IAAI;AACf,UAAMC,MAAM,GAAG;AACXF,MAAAA,EAAE,EAAE;AADO,KAAf;AAIJ,QAAIG,GAAG,GAAG,4BAAV;AAEA,QAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAAX;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAR,IAAAA,KAAK,CAAC;AACFa,MAAAA,MAAM,EAAE,MADN;AAEFN,MAAAA,GAAG,EAAEA,GAFH;AAGFO,MAAAA,IAAI,EAAEN;AAHJ,KAAD,CAAL,CAIKO,IAJL,CAIWC,QAAD,IAAc;AAClBL,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACF,IAArB;AAEA,YAAMG,KAAK,GAAGR,IAAI,CAACS,KAAL,CAAWT,IAAI,CAACC,SAAL,CAAeM,QAAQ,CAACF,IAAT,CAAcK,WAA7B,CAAX,EAAsD,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAElF,eAAOA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAe,QAAxB,GACCC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACP,IAAlB,CADD,GAECO,KAFR;AAGD,OALa,CAAd;AAMA,YAAMI,SAAS,GAAGhB,IAAI,CAACS,KAAL,CAAWT,IAAI,CAACC,SAAL,CAAeM,QAAQ,CAACF,IAAT,CAAcY,eAA7B,CAAX,EAA0D,CAACN,GAAD,EAAMC,KAAN,KAAgB;AAE1F,eAAOA,KAAK,IAAIA,KAAK,CAACC,IAAN,KAAe,QAAxB,GACCC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACP,IAAlB,CADD,GAECO,KAFR;AAGD,OALiB,CAAlB;AAMAV,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYa,SAAZ;AACA,UAAIE,MAAM,GAAG1B,MAAM,CAAC2B,mBAAP,CAA2BX,KAA3B,EAAkCQ,SAAlC,CAAb,CAjBkB,CAkBpB;AACA;AACA;AACA;AACA;AACD,KA3BH,EA4BGI,KA5BH,CA4BS,UAAUC,KAAV,EAAiB;AACpBnB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,KAAZ;AACH,KA9BH;AA+BC,GAxCD;AAyCH;AAGD,OAAO,SAASC,SAAT,CAAmBC,EAAnB,EAAuBf,KAAvB,EAA8BQ,SAA9B,EAAyCQ,eAAzC,EAA0D;AAC7DtB,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,SAAO;AACHU,IAAAA,IAAI,EAAEpB,aADH;AAEH8B,IAAAA,EAFG;AAGHf,IAAAA,KAHG;AAIHQ,IAAAA,SAJG;AAKHQ,IAAAA;AALG,GAAP;AAOH","sourcesContent":["import axios from 'axios'\nimport crypto from 'crypto'\n\nimport { DIFFIE_HELMAN, DIFFIE_HELMAN_END } from './actionTypes'\n\nexport function Dh() {\n    return dispatch => {\n        const DHData = {\n            Dh: true\n        }\n\n    let url = 'http://localhost:8888/auth';\n    \n    let body = JSON.stringify(DHData);\n    console.log(body)\n    axios({\n        method: 'post',\n        url: url,\n        data: body,\n      }).then((response) => {\n          console.log(response.data);\n          \n          const prime = JSON.parse(JSON.stringify(response.data.serverPrime), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          const generator = JSON.parse(JSON.stringify(response.data.serverGenerator), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          console.log(prime)\n          console.log(generator)\n          let client = crypto.createDiffieHellman(prime, generator)          \n        //   dispatch(DHSuccess(parseData.data.IP, \n        //                      parseData.data.prime, \n        //                      parseData.data.generator, \n        //                      parseData.data.serverPublicKey\n        //                     ))\n      })\n      .catch(function (error) {\n          console.log(error);\n      });\n    }\n}\n\n\nexport function DHSuccess(IP, prime, generator, serverPublicKey) {\n    console.log(\"DIFFIE_HELMAN\")\n    return {\n        type: DIFFIE_HELMAN,\n        IP,\n        prime,\n        generator,\n        serverPublicKey\n    }\n}\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}