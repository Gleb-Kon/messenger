{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_SUCCESS, AUTH_LOGOUT } from './actionTypes';\nexport function auth(email, password, isLogin) {\n  return async dispatch => {\n    const authData = {\n      email,\n      password\n    };\n    const secret = localStorage.getItem(\"secret\");\n    let str = \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\";\n    console.log(cryptoJs.AES.encrypt(str, secret));\n    authData.email = crypto.AES;\n    let url = 'http://localhost:8888/registration';\n\n    if (isLogin) {\n      console.log(\"isLogin\");\n      url = 'http://localhost:8888/auth';\n    }\n\n    let body = JSON.stringify(authData);\n    axios({\n      method: 'post',\n      url: url,\n      data: body\n    }).then(response => {\n      console.log(response);\n      localStorage.setItem('userId', response.data.userId);\n      localStorage.setItem('email', response.data.email);\n      localStorage.setItem('token', response.data.token);\n      let expiresIn = response.data.dateOfCreation;\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      dispatch(authSuccess(response.data.token));\n      dispatch(authLogout(response.data.dateOfCreation));\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n}\nexport function authLogout() {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, 300000);\n  };\n}\nexport function logout() {\n  console.log(\"logout\");\n  localStorage.setItem('userId', null);\n  localStorage.setItem('email', null);\n  localStorage.setItem('token', null);\n  return {\n    type: AUTH_LOGOUT\n  };\n}\nexport function autoLogin() {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      dispatch(authSuccess(token));\n    }\n  };\n}\nexport function authSuccess(token) {\n  console.log(\"authSuc\");\n  return {\n    type: AUTH_SUCCESS,\n    token\n  };\n}","map":{"version":3,"sources":["/home/gleban/WORKS/messnger_project/client/src/store/actions/auth.js"],"names":["axios","AUTH_SUCCESS","AUTH_LOGOUT","auth","email","password","isLogin","dispatch","authData","secret","localStorage","getItem","str","console","log","cryptoJs","AES","encrypt","crypto","url","body","JSON","stringify","method","data","then","response","setItem","userId","token","expiresIn","dateOfCreation","expirationDate","Date","getTime","authSuccess","authLogout","catch","error","setTimeout","logout","type","autoLogin"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { AUTH_SUCCESS, AUTH_LOGOUT } from './actionTypes'\n\nexport function auth(email, password, isLogin) {\n    return async dispatch => {\n        const authData = {\n            email, password\n        }\n          \n        const secret = localStorage.getItem(\"secret\");\n        let str = \"qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\"\n        console.log(cryptoJs.AES.encrypt(str, secret))\n        authData.email = crypto.AES\n    \n    \n    let url = 'http://localhost:8888/registration'\n\n    if(isLogin) {\n        console.log(\"isLogin\")\n\n        url = 'http://localhost:8888/auth'\n    }\n    \n\n\n\n    let body = JSON.stringify(authData);\n    \n    axios({\n      method: 'post',\n      url: url,\n      data: body,\n    }).then((response) => {\n        console.log(response);\n        localStorage.setItem('userId', response.data.userId)\n        localStorage.setItem('email', response.data.email)\n        localStorage.setItem('token', response.data.token)\n        let expiresIn = response.data.dateOfCreation;\n        const expirationDate = new Date(new Date().getTime() + expiresIn * 1000)  \n\n        dispatch(authSuccess(response.data.token))\n        dispatch(authLogout(response.data.dateOfCreation))\n    })\n    .catch(function (error) {\n        console.log(error);\n    });\n  }\n}\nexport function authLogout() {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout())\n        }, 300000)\n    }\n}\n\nexport function logout() {\n    console.log(\"logout\")\n    localStorage.setItem('userId', null)\n    localStorage.setItem('email', null)\n    localStorage.setItem('token', null)\n    return {\n        type: AUTH_LOGOUT \n    }\n}\n\nexport function autoLogin() {\n    return dispatch => {\n        const token = localStorage.getItem('token')\n        if (!token){\n            dispatch(logout())\n        } else {\n            dispatch(authSuccess(token))\n        }\n    }\n}\n\n\nexport function authSuccess(token) {\n    console.log(\"authSuc\")\n    return {\n        type: AUTH_SUCCESS,\n        token\n    }\n}"]},"metadata":{},"sourceType":"module"}