{"ast":null,"code":"import axios from 'axios';\nimport crypto from 'crypto';\nimport { DIFFIE_HELMAN, DIFFIE_HELMAN_END } from './actionTypes';\nexport function Dh() {\n  return dispatch => {\n    const DHData = {\n      \"Dh\": true,\n      \"Dh_time\": \"begin\"\n    };\n    let url = 'http://localhost:8888/auth';\n    let body = JSON.stringify(DHData);\n    console.log(body);\n    axios({\n      method: 'post',\n      url: url,\n      data: body\n    }).then(response => {\n      dispatch(DHSuccess(IP, prime, generator, serverPubKey, secret));\n      console.log(\"DH END\");\n      return {\n        IP,\n        clientPubKey\n      }; //   }).then((result) => {\n      //     const bodyEnd = {\n      //         \"Dh\": true,\n      //         \"Dh_time\": \"end\",\n      //         \"IP\": result.IP\n      //       }\n      //       console.log(result)\n      //       axios({\n      //         method: 'post',\n      //         url: \"http://localhost:8888/auth\",\n      //         data: bodyEnd,\n      //       }).then((response) => {\n      //           console.log(\"2 axios\")\n      //       })\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n}\nexport function DHhelp(response) {\n  console.log(response.data);\n  const IP = response.data.IP;\n  console.log(\"IP\", response.data.IP);\n  const prime = JSON.parse(JSON.stringify(response.data.serverPrime), (key, value) => {\n    return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n  });\n  const generator = JSON.parse(JSON.stringify(response.data.serverGenerator), (key, value) => {\n    return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n  });\n  const serverPubKey = JSON.parse(JSON.stringify(response.data.serverPublicKey), (key, value) => {\n    return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n  });\n  console.log(\"prime\", prime.toString(\"hex\"));\n  console.log(\"generator\", generator.toString(\"hex\"));\n  console.log(\"serverPubKey\", serverPubKey.toString(\"hex\"));\n  let client = crypto.createDiffieHellman(prime, generator);\n  client.generateKeys();\n  const clientPubKey = client.getPublicKey();\n  console.log(\"clientPubKey\", clientPubKey.toString(\"hex\"));\n  let secret = client.computeSecret(serverPubKey);\n  console.log(\"secret\", secret.toString(\"hex\"));\n  let ObjData = {\n    \"prime\": prime,\n    \"generator\": generator,\n    \"serverPubKey\": serverPubKey,\n    \"clientPubKey\": clientPubKey,\n    \"secret\": secret\n  };\n  return ObjData;\n}\nexport function DHSuccess(IP, prime, generator, serverPublicKey, secret) {\n  console.log(\"DIFFIE_HELMAN\");\n  return {\n    type: DIFFIE_HELMAN,\n    IP,\n    prime,\n    generator,\n    serverPublicKey,\n    secret\n  };\n}","map":{"version":3,"sources":["/home/gleban/WORKS/messnger_project/client/src/store/actions/Dh.js"],"names":["axios","crypto","DIFFIE_HELMAN","DIFFIE_HELMAN_END","Dh","dispatch","DHData","url","body","JSON","stringify","console","log","method","data","then","response","DHSuccess","IP","prime","generator","serverPubKey","secret","clientPubKey","catch","error","DHhelp","parse","serverPrime","key","value","type","Buffer","from","serverGenerator","serverPublicKey","toString","client","createDiffieHellman","generateKeys","getPublicKey","computeSecret","ObjData"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport crypto from 'crypto'\n\nimport { DIFFIE_HELMAN, DIFFIE_HELMAN_END } from './actionTypes'\n\nexport function Dh() {\n    return dispatch => {\n        const DHData = {\n           \"Dh\": true,\n           \"Dh_time\": \"begin\"\n        }\n\n    let url = 'http://localhost:8888/auth';\n    \n    let body = JSON.stringify(DHData);\n    console.log(body)\n    axios({\n        method: 'post',\n        url: url,\n        data: body,\n      }).then((response) => {\n          \n\n          \n\n          \n          dispatch(DHSuccess(IP, prime, generator, serverPubKey, secret))\n          console.log(\"DH END\")\n          return {IP, clientPubKey}\n    //   }).then((result) => {\n    //     const bodyEnd = {\n    //         \"Dh\": true,\n    //         \"Dh_time\": \"end\",\n    //         \"IP\": result.IP\n    //       }\n    //       console.log(result)\n\n    //       axios({\n    //         method: 'post',\n    //         url: \"http://localhost:8888/auth\",\n    //         data: bodyEnd,\n    //       }).then((response) => {\n    //           console.log(\"2 axios\")\n    //       })\n    })\n      .catch(function (error) {\n          console.log(error);\n      });\n    }\n}\n\nexport function DHhelp(response) {\n    console.log(response.data);\n          const IP = response.data.IP\n          console.log(\"IP\", response.data.IP);\n\n          const prime = JSON.parse(JSON.stringify(response.data.serverPrime), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          const generator = JSON.parse(JSON.stringify(response.data.serverGenerator), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          const serverPubKey = JSON.parse(JSON.stringify(response.data.serverPublicKey), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n\n          console.log(\"prime\" ,prime.toString(\"hex\"))\n          console.log(\"generator\", generator.toString(\"hex\"))\n          console.log(\"serverPubKey\", serverPubKey.toString(\"hex\"))\n\n          let client = crypto.createDiffieHellman(prime, generator)\n          client.generateKeys(); \n\n          const clientPubKey = client.getPublicKey();\n          console.log(\"clientPubKey\", clientPubKey.toString(\"hex\")  )\n          \n          let secret = client.computeSecret(serverPubKey)\n          console.log(\"secret\", secret.toString(\"hex\"))\n\n          let ObjData = {\n              \"prime\": prime,\n              \"generator\": generator,\n              \"serverPubKey\": serverPubKey,\n              \"clientPubKey\": clientPubKey,\n              \"secret\": secret\n          }\n\n          return ObjData;\n\n}\n\nexport function DHSuccess(IP, prime, generator, serverPublicKey, secret) {\n    console.log(\"DIFFIE_HELMAN\")\n    return {\n        type: DIFFIE_HELMAN,\n        IP,\n        prime,\n        generator,\n        serverPublicKey,\n        secret\n    }\n}\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}