{"ast":null,"code":"import { CONNECT_TO_SOCKET } from './actionTypes';\nimport socketIOClient from \"socket.io-client\";\nimport crypto from 'crypto';\nexport default function connectToSocket() {\n  return dispatch => {\n    const socket = socketIOClient(\"localhost:8000\");\n    const data = {\n      id: localStorage.getItem('id'),\n      numberRoom: localStorage.getItem('id')\n    };\n    console.log(\"socket\", socket.id);\n    socket.on(\"connect\", socket => {});\n    socket.on(\"DH_response\", dataRes => {\n      console.log(\"qwqqqqqqqqqqqqqqqqqqqqqqq\", dataRes);\n      console.log(dataRes.serverPrime);\n      let client = crypto.createDiffieHellman(dataRes.serverPrime, dataRes.serverGenerator);\n      client.generateKeys(); //const buf = Buffer.from(dataRes.serverPublicKey.buffer);\n\n      const pubCliKey = client.getPublicKey();\n      console.log(buf);\n      let secret = client.computeSecret(dataRes.serverPublicKey);\n      console.log(\"secretsecretsecret\", secret);\n      let DHEndData = {\n        id: data.id,\n        pubCliKey: pubCliKey\n      };\n      socket.emit(\"DH_end\", DHEndData);\n    });\n    socket.emit('join', {\n      numberRoom: data.numberRoom\n    });\n    socket.emit(\"DH_begin\", data);\n    console.log(\"CONNECT SOCKET\", socket);\n    dispatch(connected(socket));\n  };\n}\nexport function connected(socket) {\n  return {\n    type: CONNECT_TO_SOCKET,\n    socket\n  };\n}","map":{"version":3,"sources":["/home/gleban/WORKS/messnger_project/client/src/store/actions/connectToSocket.js"],"names":["CONNECT_TO_SOCKET","socketIOClient","crypto","connectToSocket","dispatch","socket","data","id","localStorage","getItem","numberRoom","console","log","on","dataRes","serverPrime","client","createDiffieHellman","serverGenerator","generateKeys","pubCliKey","getPublicKey","buf","secret","computeSecret","serverPublicKey","DHEndData","emit","connected","type"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,eAAlC;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGA,eAAe,SAASC,eAAT,GAA2B;AACtC,SAAOC,QAAQ,IAAI;AACf,UAAMC,MAAM,GAAGJ,cAAc,CAAC,gBAAD,CAA7B;AACA,UAAMK,IAAI,GAAE;AACRC,MAAAA,EAAE,EAAEC,YAAY,CAACC,OAAb,CAAqB,IAArB,CADI;AAERC,MAAAA,UAAU,EAAEF,YAAY,CAACC,OAAb,CAAqB,IAArB;AAFJ,KAAZ;AAIAE,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBP,MAAM,CAACE,EAA7B;AAEAF,IAAAA,MAAM,CAACQ,EAAP,CAAU,SAAV,EAAsBR,MAAD,IAAY,CAChC,CADD;AAIAA,IAAAA,MAAM,CAACQ,EAAP,CAAU,aAAV,EAAyBC,OAAO,IAAI;AAChCH,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCE,OAAzC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYE,OAAO,CAACC,WAApB;AACA,UAAIC,MAAM,GAAGd,MAAM,CAACe,mBAAP,CAA2BH,OAAO,CAACC,WAAnC,EAAgDD,OAAO,CAACI,eAAxD,CAAb;AACAF,MAAAA,MAAM,CAACG,YAAP,GAJgC,CAKhC;;AAEA,YAAMC,SAAS,GAAGJ,MAAM,CAACK,YAAP,EAAlB;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AAEA,UAAIC,MAAM,GAAGP,MAAM,CAACQ,aAAP,CAAqBV,OAAO,CAACW,eAA7B,CAAb;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCW,MAAlC;AAEA,UAAIG,SAAS,GAAG;AACZnB,QAAAA,EAAE,EAAED,IAAI,CAACC,EADG;AAEZa,QAAAA,SAAS,EAAEA;AAFC,OAAhB;AAIAf,MAAAA,MAAM,CAACsB,IAAP,CAAY,QAAZ,EAAsBD,SAAtB;AACH,KAlBD;AAmBArB,IAAAA,MAAM,CAACsB,IAAP,CAAY,MAAZ,EAAoB;AAACjB,MAAAA,UAAU,EAAEJ,IAAI,CAACI;AAAlB,KAApB;AACAL,IAAAA,MAAM,CAACsB,IAAP,CAAY,UAAZ,EAAwBrB,IAAxB;AAIAK,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BP,MAA9B;AACAD,IAAAA,QAAQ,CAACwB,SAAS,CAACvB,MAAD,CAAV,CAAR;AACH,GAtCD;AAwCH;AAED,OAAO,SAASuB,SAAT,CAAmBvB,MAAnB,EAA2B;AAC9B,SAAO;AACHwB,IAAAA,IAAI,EAAE7B,iBADH;AAEHK,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["import { CONNECT_TO_SOCKET } from './actionTypes'\n\nimport socketIOClient from \"socket.io-client\";\nimport crypto from 'crypto'\n\n\nexport default function connectToSocket() {\n    return dispatch => {\n        const socket = socketIOClient(\"localhost:8000\");\n        const data ={ \n            id: localStorage.getItem('id'),\n            numberRoom: localStorage.getItem('id')\n        }\n        console.log(\"socket\", socket.id)\n        \n        socket.on(\"connect\", (socket) => {\n        });\n       \n        \n        socket.on(\"DH_response\", dataRes => {\n            console.log(\"qwqqqqqqqqqqqqqqqqqqqqqqq\", dataRes)\n            console.log(dataRes.serverPrime)\n            let client = crypto.createDiffieHellman(dataRes.serverPrime, dataRes.serverGenerator) \n            client.generateKeys()\n            //const buf = Buffer.from(dataRes.serverPublicKey.buffer);\n\n            const pubCliKey = client.getPublicKey(); \n            console.log(buf)\n            \n            let secret = client.computeSecret(dataRes.serverPublicKey) \n            console.log(\"secretsecretsecret\", secret)\n\n            let DHEndData = {\n                id: data.id,\n                pubCliKey: pubCliKey\n            }\n            socket.emit(\"DH_end\", DHEndData);\n        })\n        socket.emit('join', {numberRoom: data.numberRoom});\n        socket.emit(\"DH_begin\", data);\n       \n\n        \n        console.log(\"CONNECT SOCKET\", socket)\n        dispatch(connected(socket))\n    }\n    \n}\n\nexport function connected(socket) {\n    return {\n        type: CONNECT_TO_SOCKET,\n        socket\n    }\n}"]},"metadata":{},"sourceType":"module"}