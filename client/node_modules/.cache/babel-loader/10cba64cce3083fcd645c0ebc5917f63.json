{"ast":null,"code":"import axios from 'axios';\nimport crypto from 'crypto';\nimport { DIFFIE_HELMAN, DIFFIE_HELMAN_END } from './actionTypes';\nexport function Dh() {\n  return dispatch => {\n    const DHData = {\n      Dh: true\n    };\n    let url = 'http://localhost:8888/auth';\n    let body = JSON.stringify(DHData);\n    console.log(body);\n    axios({\n      method: 'post',\n      url: url,\n      data: body\n    }).then(response => {\n      console.log(response.data);\n      const IP = response.data.IP;\n      console.log(\"IP\", response.data.IP);\n      const prime = JSON.parse(JSON.stringify(response.data.serverPrime), (key, value) => {\n        return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n      });\n      const generator = JSON.parse(JSON.stringify(response.data.serverGenerator), (key, value) => {\n        return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n      });\n      const serverPubKey = JSON.parse(JSON.stringify(response.data.serverPublicKey), (key, value) => {\n        return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n      });\n      console.log(\"prime\", prime.toString(\"hex\"));\n      console.log(\"generator\", generator.toString(\"hex\"));\n      console.log(\"serverPubKey\", serverPubKey.toString(\"hex\"));\n      let client = crypto.createDiffieHellman(prime, generator);\n      client.generateKeys(); //client pub and private key\n\n      let secret = client.computeSecret(serverPubKey);\n      console.log(\"secret\", secret.toString(\"hex\"));\n      dispatch(DHSuccess(IP, prime, generator, serverPubKey));\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n}\nexport function DHSuccess(IP, prime, generator, serverPublicKey) {\n  console.log(\"DIFFIE_HELMAN\");\n  return {\n    type: DIFFIE_HELMAN,\n    IP,\n    prime,\n    generator,\n    serverPublicKey\n  };\n}","map":{"version":3,"sources":["/home/gleban/WORKS/messnger_project/client/src/store/actions/Dh.js"],"names":["axios","crypto","DIFFIE_HELMAN","DIFFIE_HELMAN_END","Dh","dispatch","DHData","url","body","JSON","stringify","console","log","method","data","then","response","IP","prime","parse","serverPrime","key","value","type","Buffer","from","generator","serverGenerator","serverPubKey","serverPublicKey","toString","client","createDiffieHellman","generateKeys","secret","computeSecret","DHSuccess","catch","error"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport crypto from 'crypto'\n\nimport { DIFFIE_HELMAN, DIFFIE_HELMAN_END } from './actionTypes'\n\nexport function Dh() {\n    return dispatch => {\n        const DHData = {\n            Dh: true\n        }\n\n    let url = 'http://localhost:8888/auth';\n    \n    let body = JSON.stringify(DHData);\n    console.log(body)\n    axios({\n        method: 'post',\n        url: url,\n        data: body,\n      }).then((response) => {\n          console.log(response.data);\n          const IP = response.data.IP\n          console.log(\"IP\", response.data.IP);\n\n          const prime = JSON.parse(JSON.stringify(response.data.serverPrime), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          const generator = JSON.parse(JSON.stringify(response.data.serverGenerator), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          const serverPubKey = JSON.parse(JSON.stringify(response.data.serverPublicKey), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          console.log(\"prime\" ,prime.toString(\"hex\"))\n          console.log(\"generator\", generator.toString(\"hex\"))\n          console.log(\"serverPubKey\", serverPubKey.toString(\"hex\"))\n\n          let client = crypto.createDiffieHellman(prime, generator)\n          client.generateKeys(); //client pub and private key\n\n          let secret = client.computeSecret(serverPubKey)\n          console.log(\"secret\", secret.toString(\"hex\"))\n          \n          dispatch(DHSuccess(IP, prime, generator, serverPubKey))\n\n\n      })\n      .catch(function (error) {\n          console.log(error);\n      });\n    }\n}\n\n\nexport function DHSuccess(IP, prime, generator, serverPublicKey) {\n    console.log(\"DIFFIE_HELMAN\")\n    return {\n        type: DIFFIE_HELMAN,\n        IP,\n        prime,\n        generator,\n        serverPublicKey\n    }\n}\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}