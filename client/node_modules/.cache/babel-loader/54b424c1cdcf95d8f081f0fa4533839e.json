{"ast":null,"code":"import axios from 'axios';\nimport crypto from 'crypto';\nimport { DIFFIE_HELMAN, DIFFIE_HELMAN_END } from './actionTypes';\nexport function Dh() {\n  return dispatch => {\n    const DHData = {\n      \"Dh\": true,\n      \"Dh_time\": \"begin\"\n    };\n    let url = 'http://localhost:8888/auth';\n    let body = JSON.stringify(DHData);\n    console.log(body);\n    axios({\n      method: 'post',\n      url: url,\n      data: body\n    }).then(response => {\n      let data = DHhelp(response);\n      dispatch(DHSuccess(data.IP, data.prime, data.generator, data.serverPubKey, data.secret));\n      console.log(\"DH END\");\n      const DHDataEnd = {\n        \"Dh\": true,\n        \"Dh_time\": \"end\",\n        \"IP\": data.IP,\n        \"client_public_key\": data.clientPubKey\n      };\n      const bodyEnd = JSON.stringify(DHDataEnd);\n      return axios({\n        method: 'post',\n        url: url,\n        data: bodyEnd\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n}\nexport function DHhelp(response) {\n  console.log(response.data);\n  const IP = response.data.IP;\n  console.log(\"IP\", response.data.IP);\n  const prime = JSON.parse(JSON.stringify(response.data.serverPrime), (key, value) => {\n    return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n  });\n  const generator = JSON.parse(JSON.stringify(response.data.serverGenerator), (key, value) => {\n    return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n  });\n  const serverPubKey = JSON.parse(JSON.stringify(response.data.serverPublicKey), (key, value) => {\n    return value && value.type === 'Buffer' ? Buffer.from(value.data) : value;\n  });\n  console.log(\"prime\", prime.toString(\"hex\"));\n  console.log(\"generator\", generator.toString(\"hex\"));\n  console.log(\"serverPubKey\", serverPubKey.toString(\"hex\"));\n  let client = crypto.createDiffieHellman(prime, generator);\n  client.generateKeys();\n  const clientPubKey = client.getPublicKey();\n  console.log(\"clientPubKey\", clientPubKey.toString(\"hex\"));\n  let secret = client.computeSecret(serverPubKey);\n  console.log(\"secret\", secret.toString(\"hex\"));\n  let ObjData = {\n    \"prime\": prime,\n    \"generator\": generator,\n    \"serverPubKey\": serverPubKey,\n    \"clientPubKey\": clientPubKey,\n    \"secret\": secret\n  };\n  return ObjData;\n}\nexport function DHSuccess(IP, prime, generator, serverPublicKey, secret) {\n  console.log(\"DIFFIE_HELMAN\");\n  return {\n    type: DIFFIE_HELMAN,\n    IP,\n    prime,\n    generator,\n    serverPublicKey,\n    secret\n  };\n}","map":{"version":3,"sources":["/home/gleban/WORKS/messnger_project/client/src/store/actions/Dh.js"],"names":["axios","crypto","DIFFIE_HELMAN","DIFFIE_HELMAN_END","Dh","dispatch","DHData","url","body","JSON","stringify","console","log","method","data","then","response","DHhelp","DHSuccess","IP","prime","generator","serverPubKey","secret","DHDataEnd","clientPubKey","bodyEnd","catch","error","parse","serverPrime","key","value","type","Buffer","from","serverGenerator","serverPublicKey","toString","client","createDiffieHellman","generateKeys","getPublicKey","computeSecret","ObjData"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport crypto from 'crypto'\n\nimport { DIFFIE_HELMAN, DIFFIE_HELMAN_END } from './actionTypes'\n\nexport function Dh() {\n    return dispatch => {\n        const DHData = {\n           \"Dh\": true,\n           \"Dh_time\": \"begin\"\n        }\n\n    let url = 'http://localhost:8888/auth';\n    \n    let body = JSON.stringify(DHData);\n    console.log(body)\n    axios({\n        method: 'post',\n        url: url,\n        data: body,\n      }).then((response) => {\n        let data = DHhelp(response)\n        dispatch(DHSuccess(data.IP, data.prime, data.generator, data.serverPubKey, data.secret))\n        console.log(\"DH END\")\n        const DHDataEnd = {\n            \"Dh\": true,\n            \"Dh_time\": \"end\",\n            \"IP\": data.IP,\n            \"client_public_key\": data.clientPubKey\n         }\n        const bodyEnd = JSON.stringify(DHDataEnd);\n        return axios({\n            method: 'post',\n            url: url,\n            data: bodyEnd\n        })\n    }).catch(function (error) {\n        console.log(error);\n      });\n    }\n}\n\nexport function DHhelp(response) {\n    console.log(response.data);\n          const IP = response.data.IP\n          console.log(\"IP\", response.data.IP);\n\n          const prime = JSON.parse(JSON.stringify(response.data.serverPrime), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          const generator = JSON.parse(JSON.stringify(response.data.serverGenerator), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n          const serverPubKey = JSON.parse(JSON.stringify(response.data.serverPublicKey), (key, value) => { \n            \n            return value && value.type === 'Buffer'\n                  ? Buffer.from(value.data)\n                  : value;\n          });\n\n          console.log(\"prime\" ,prime.toString(\"hex\"))\n          console.log(\"generator\", generator.toString(\"hex\"))\n          console.log(\"serverPubKey\", serverPubKey.toString(\"hex\"))\n\n          let client = crypto.createDiffieHellman(prime, generator)\n          client.generateKeys(); \n\n          const clientPubKey = client.getPublicKey();\n          console.log(\"clientPubKey\", clientPubKey.toString(\"hex\")  )\n          \n          let secret = client.computeSecret(serverPubKey)\n          console.log(\"secret\", secret.toString(\"hex\"))\n\n          let ObjData = {\n              \"prime\": prime,\n              \"generator\": generator,\n              \"serverPubKey\": serverPubKey,\n              \"clientPubKey\": clientPubKey,\n              \"secret\": secret\n          }\n\n          return ObjData;\n\n}\n\nexport function DHSuccess(IP, prime, generator, serverPublicKey, secret) {\n    console.log(\"DIFFIE_HELMAN\")\n    return {\n        type: DIFFIE_HELMAN,\n        IP,\n        prime,\n        generator,\n        serverPublicKey,\n        secret\n    }\n}\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}